---
apiVersion: "extensions/v1beta1"
kind: "DaemonSet"
metadata:
  labels:
    app: {{ template "__CHART__.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "__CHART__.fullname" . }}
spec:
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: {{ .Values.Monitoring.Pod.Scrape }}
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/port: {{ .Values.Monitoring.Pod.Port }}
        ## Scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/path: {{ .Values.Monitoring.Pod.Path | quote }}
        ## Oftentimes, applicatins need to be restarted once once thier configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        application: "node-exporter"
        role: "metrics"
        version: "1.0.0"
    spec:
      # volumes:
      #   - name: "nodeexporter-etc-conf-d"
      # configMap:
      #   - name: "nodeexporter-data"
      #     hostPath:
      #       path: /data/nodeexporter/
      hostNetwork: true
      hostPID: true
      containers:
        - name: {{ template "__CHART__.name" }}
          # env:
          # - name: "FOO"
          #   value: "BAR"
          image: "__IMAGE__" # Todo: Update this
          imagePullPolicy: "IfNotPresent"
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          ports:
            - containerPort: __CONTAINER_PORT__
              protocol: "__CONTAINER_PORT_PROTOCOL__"
              hostPort: __CONTAINER_PORT__
              name: "__CONTAINER_PORT_NAME__"
          # volumeMounts:
          #   - name: "nodeexporter-etc-conf-d"
          #     readOnly: true
          #     mountPath: "/etc/nodeexporter/conf.d"
          #   - name: "nodeexporter-data
          #     readOnly: false
          #     mountPath: "/data"
          livenessProbe:
            httpGet:
              # Path to probe; should be cheap, but representative of typical behavior
              path: "/healthz"
              port: 9100
              httpHeaders:
                - name: "Host"
                  value: "www.example.com" # Todo: Fix this
                #- name: "X-Custom-Header"
                #  value: "Awesome"
            ## Number of seconds after the container has started before liveness probes are initiated.
            ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
            initialDelaySeconds: 5
            ## Number of seconds after which the probe times out. Minimum value is 1
            timeoutSeconds: 1
            ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
            ## Minimum value is 1.
            failureThreshold: 3
          readinessProbe:
            httpGet:
              # Path to probe; akin to a status check.
              path: "/healthz"
              port: 9100
              httpHeaders:
                - name: "Host"
                  value: "www.example.com" # Todo: Fix this
                #- name: "X-Custom-Header"
                #  value: "Awesome"
            ## Number of seconds after the container has started before liveness probes are initiated.
            ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
            initialDelaySeconds: 5
            ## Number of seconds after which the probe times out. Minimum value is 1
            timeoutSeconds: 1
            ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
            ## Minimum value is 1.
            failureThreshold: 3
      restartPolicy: "Always"
      securityContext: {}
