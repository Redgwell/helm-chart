---
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "fullname" . }}
spec:
  replicas: {{ default 2 .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      # volumes:
      #   - name: {{ template "fullname" . }}
      #     configMap:
      #       name: configmap
      #   - name: "webserver-data"
      #     hostPath:
      #       path: /data/webserver/
      containers:
        - name: {{ template "name" }}
          # Environment variables can be populated in a number of ways, including secrets, or just string values. Below
          # are some examples for you to copy-paste. Remember to uncomment the `env` node!
          #
          # env:
          #
          # An example of a simple key value pair
          #
          # - name: "FOO"
          #   value: "BAR"
          #
          # An example of environment variables from a secret
          #
          # - name: "SECRET"
          #   valueFrom:
          #     secretKeyRef:
          #       name: __SECRET_NAME__
          #       key: __KEY_USED_IN_SECRET_NAME__
          #
          image: {{ .Values.image | quote }}
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu | quote }}
              memory: {{ .Values.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.resources.requests.cpu | quote }}
              memory: {{ .Values.resources.requests.memory | quote }}
          securityContext:
            privileged: {{ default false .Values.securityContext.privileged }}
            # capabilities:
              # add:
                # - "SETPCAP"
                # - "SYS_MODULE"
                # - "SYS_RAWIO"
                # - "SYS_PACCT"
                # - "SYS_ADMIN"
                # - "SYS_NICE"
                # - "SYS_RESOURCE"
                # - "SYS_TIME"
                # - "SYS_TTY_CONFIG"
                # - "MKNOD"
                # - "AUDIT_WRITE"
                # - "AUDIT_CONTROL"
                # - "MAC_OVERRIDE"
                # - "MAC_ADMIN"
                # - "NET_ADMIN"
                # - "SYSLOG"
                # - "CHOWN"
                # - "NET_RAW"
                # - "DAC_OVERRIDE"
                # - "FOWNER"
                # - "DAC_READ_SEARCH"
                # - "FSETID"
                # - "KILL"
                # - "SETGID"
                # - "SETUID"
                # - "LINUX_IMMUTABLE"
                # - "NET_BIND_SERVICE"
                # - "NET_BROADCAST"
                # - "IPC_LOCK"
                # - "IPC_OWNER"
                # - "SYS_CHROOT"
                # - "SYS_PTRACE"
                # - "SYS_BOOT"
                # - "LEASE"
                # - "SETFCAP"
                # - "WAKE_ALARM"
                # - "BLOCK_SUSPEND"
          ports:
            # The container port to expose, and how to expose it. Possible values are any valid port number. You
            # probably want to expose your application port, though.
            #
            # See http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_containerport
            - containerPort: __CONTAINER_PORT__
              # What protocol the port uses. Possible values are:
              # - "TCP"
              # - "UDP"
              protocol: __CONTAINER_PORT_PROTOCOL__
              # What designation to give the port. Useful later, so we can reference the port by name in the health
              # check.
              name: __CONTAINER_PORT_NAME__
          # volumeMounts:
          #   - name: "webserver-etc-conf-d"
          #     readOnly: true
          #     mountPath: "/etc/webserver/conf.d"
          #   - name: "webserver-data
          #     readOnly: false
          #     mountPath: "/data"
          livenessProbe:
            tcpSocket:
              port: __CONTAINER_PORT_NAME__
            initialDelaySeconds: 5
            timeoutSeconds: 1
          readinessProbe:
            tcpSocket:
              port: __CONTAINER_PORT_NAME__
            initialDelaySeconds: 5
            timeoutSeconds: 1
      # Whether to restart this pod. Possible values are:
      # - Always (Sensible Default)
      # - OnFailure
      # - Never
      #
      # For more information, see http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: __RESTART_POLICY__
      securityContext: {}
